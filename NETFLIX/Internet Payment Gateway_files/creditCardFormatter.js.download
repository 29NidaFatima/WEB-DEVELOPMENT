(function() {

	window.CreditCardFormatter = window.CreditCardFormatter || {};

	// register methods for desktop and mobile view
	window.CreditCardFormatter.formatCardNumber = formatCardNumber;
	window.CreditCardFormatter.formatCardNumberOnKeyPress = formatCardNumberOnKeyPress;

	function isAlphaNumeric(e) {
		var regex = new RegExp("^[a-zA-Z0-9]+$");
		var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
		return regex.test(str);
	}

	function formatCardNumberOnKeyPress(e) {
		if (e.which !== 0 && e.charCode !== 0 && !e.ctrlKey && !e.metaKey && !e.altKey && isAlphaNumeric(e)) {
			var offset = 1;
			var pos = getCaretPosition(document.getElementById('cardnumber'));
			if (pos.end - pos.start > 0) {
				return;
			}
			var $target = $(e.currentTarget);
			var eventKey;
			if (e.key) {
				eventKey = e.key;
			} else {
				// TASK-19146 : To support chrome 49 and below
				var code = e.which || e.keyCode;
				eventKey = String.fromCharCode(code);
			}
			var value = $target.val().insertAt(pos.end, eventKey);
			var cardNumber = getFormattedCardNumber(value, true).trim();
			$target.val(cardNumber);
			offset += Math.max(0, (cardNumber.length - value.length));
			setCaretPosition(document.getElementById('cardnumber'), pos.end + offset, pos.end + offset);
			e.preventDefault();
		}
	}

	function formatCardNumber() {
		var $cardNumberField = $("#cardnumber");
		var cardNumber = getFormattedCardNumber($cardNumberField.val(), false);
		$cardNumberField.val(cardNumber);
	}

	/**
	 * Method formats card number so there is a whitespace after every 4th
	 * character e.g. XXXX XXXX XXXX XXXX.
	 */
	function getFormattedCardNumber(cardNumber, isNewCharExpected) {
		if (cardNumber === "") {
			return cardNumber;
		}
		var placeHolderChar = isNewCharExpected ? "X" : "";
		var cardNumberValue = cardNumber + placeHolderChar;
		cardNumberValue = cardNumberValue.replace(/[ ]+/g, "");
		var matches = cardNumberValue.match(/.{1,4}/g);
		cardNumberValue = matches.join(" ");
		return cardNumberValue.substring(0, cardNumberValue.length - placeHolderChar.length);
	}

	function getCaretPosition(input) {
		// commented as per TASK-19146
		/*
		 * if (document.selection) { input.focus(); var range =
		 * document.selection.createRange(); range.moveStart('character',
		 * -input.value.length); var start = range.text.length -
		 * range.text.length; return start + range.text.length; }
		 */
		if (input.selectionStart || input.selectionStart == '0') {
			return {
				'start' : input.selectionStart,
				'end' : input.selectionEnd
			};
		}
		return {
			'start' : input.value.length,
			'end' : input.value.length
		};
	}

	function setCaretPosition(input, start, end) {
		if (input.setSelectionRange) {
			input.focus();
			input.setSelectionRange(start, end);
		} else if (input.createTextRange) {
			var range = input.createTextRange();
			range.collapse(true);
			range.moveEnd('character', end);
			range.moveStart('character', start);
			range.select();
		}
	}

	String.prototype.insertAt = function(index, string) {
		return this.substr(0, index) + string + this.substr(index);
	}

})();